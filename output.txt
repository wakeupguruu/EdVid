{
    "output": "[\n  {\n    \"scene\": \"Scene 1: Introducing the Right Triangle\",\n    \"code\": \"from manim import *\\n\\nclass IntroScene(Scene):\\n    def construct(self):\\n        # Create right triangle\\n        triangle = Polygon(\\n            np.array([-2, -1, 0]),\\n            np.array([2, -1, 0]),\\n            np.array([-2, 2, 0]),\\n            color=WHITE\\n        )\\n        right_angle = RightAngle(\\n            triangle.get_left(),\\n            triangle.get_bottom(),\\n            color=YELLOW\\n        )\\n        \\n        # Animate creation\\n        self.play(Create(triangle))\\n        self.play(Create(right_angle))\\n        self.wait()\",\n    \"text\": \"Let's explore one of the most famous theorems in mathematics - the Pythagorean theorem. We'll start with a simple right triangle. Notice that special 90-degree angle in the corner? That's what makes it a right triangle!\"\n  },\n  {\n    \"scene\": \"Scene 2: Labeling the Sides\",\n    \"code\": \"class LabelScene(Scene):\\n    def construct(self):\\n        # Copy triangle from previous scene\\n        triangle = Polygon(\\n            np.array([-2, -1, 0]),\\n            np.array([2, -1, 0]),\\n            np.array([-2, 2, 0]),\\n            color=WHITE\\n        )\\n        \\n        # Add labels\\n        a_label = MathTex('a').next_to(triangle, RIGHT)\\n        b_label = MathTex('b').next_to(triangle, DOWN)\\n        c_label = MathTex('c').next_to(triangle, LEFT+UP)\\n        \\n        # Animate labels\\n        self.add(triangle)\\n        self.play(\\n            Write(a_label),\\n            Write(b_label),\\n            Write(c_label)\\n        )\\n        \\n        # Add theorem\\n        theorem = MathTex('a^2 + b^2 = c^2')\\n        theorem.to_edge(UP)\\n        self.play(Write(theorem))\\n        self.wait()\",\n    \"text\": \"Now, let's label our triangle's sides. The two sides that form the right angle are called the legs - we'll call them 'a' and 'b'. The longest side, opposite to the right angle, is called the hypotenuse - that's 'c'. According to Pythagoras, the square of the hypotenuse equals the sum of squares of the other two sides.\"\n  },\n  {\n    \"scene\": \"Scene 3: Visualizing the Squares\",\n    \"code\": \"class SquaresScene(Scene):\\n    def construct(self):\\n        # Create squares on each side\\n        triangle = Polygon(\\n            np.array([-2, -1, 0]),\\n            np.array([2, -1, 0]),\\n            np.array([-2, 2, 0]),\\n            color=WHITE\\n        )\\n        \\n        square_a = Square(2, color=RED).next_to(triangle, RIGHT)\\n        square_b = Square(3, color=BLUE).next_to(triangle, DOWN)\\n        square_c = Square(4, color=GREEN).next_to(triangle, LEFT+UP)\\n        \\n        # Animate squares\\n        self.add(triangle)\\n        self.play(\\n            Create(square_a),\\n            Create(square_b),\\n            Create(square_c)\\n        )\\n        \\n        # Add area labels\\n        area_a = MathTex('a^2').next_to(square_a)\\n        area_b = MathTex('b^2').next_to(square_b)\\n        area_c = MathTex('c^2').next_to(square_c)\\n        \\n        self.play(\\n            Write(area_a),\\n            Write(area_b),\\n            Write(area_c)\\n        )\\n        self.wait()\",\n    \"text\": \"Here's where it gets interesting! Let's draw squares on each side of our triangle. The areas of these squares are a², b², and c². Watch how the two smaller squares' areas (a² and b²) add up to equal the area of the large square (c²)!\"\n  },\n  {\n    \"scene\": \"Scene 4: Animated Proof\",\n    \"code\": \"class ProofScene(Scene):\\n    def construct(self):\\n        # Create animated proof with moving pieces\\n        square_a = Square(2, color=RED).shift(LEFT*2)\\n        square_b = Square(3, color=BLUE).shift(RIGHT*2)\\n        combined = VGroup(square_a, square_b)\\n        \\n        equals = MathTex('=').next_to(combined, RIGHT)\\n        square_c = Square(4, color=GREEN).next_to(equals, RIGHT)\\n        \\n        # Animate transformation\\n        self.play(Create(square_a), Create(square_b))\\n        self.play(Write(equals))\\n        self.play(Create(square_c))\\n        \\n        # Transform pieces\\n        self.play(\\n            square_a.animate.move_to(square_c.get_center()),\\n            square_b.animate.move_to(square_c.get_center())\\n        )\\n        \\n        final_eq = MathTex('a^2 + b^2 = c^2').to_edge(DOWN)\\n        self.play(Write(final_eq))\\n        self.wait(2)\",\n    \"text\": \"And now for the grand finale! Watch as we take our two smaller squares and show how they perfectly fit into the larger square. It's like a geometric puzzle where a² plus b² fills exactly the same area as c². Pretty amazing, right? This elegant relationship works for EVERY right triangle, no matter what size!\"\n  }\n]"
}