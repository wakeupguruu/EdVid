generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for prompt status
enum PromptStatus {
  pending
  processing
  completed
  failed
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String?   @unique
  password  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  prompts   Prompt[]
  logs      ActivityLog[]
  quota     UserQuota?
}

model Prompt {
  id               String        @id @default(cuid())
  inputText        String
  rawOutput        String?
  status           PromptStatus  @default(pending)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  startedProcessingAt DateTime?
  completedAt      DateTime?
  deletedAt        DateTime?

  previousPromptId String?
  userId           String

  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  previousPrompt   Prompt?       @relation("PromptHistory", fields: [previousPromptId], references: [id])
  nextPrompts      Prompt[]      @relation("PromptHistory")

  codeSnippet      CodeSnippet?
  video            Video?
  logs             ActivityLog[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([userId, createdAt])
}

model CodeSnippet {
  id        String   @id @default(uuid())
  promptId  String   @unique
  code      String
  language  String
  createdAt DateTime @default(now())

  prompt    Prompt   @relation(fields: [promptId], references: [id])
}

model Video {
  id        String         @id @default(uuid())
  promptId  String         @unique
  createdAt DateTime       @default(now())
  title String?
  duration Int?
  thumbnailUrl String?
  videoUrl String?
  processingStartedAt DateTime?
  processingCompletedAt DateTime?
  errorMessage String?
  
  status VideoStatus @default(queued)
  prompt    Prompt         @relation(fields: [promptId], references: [id])
  formats   VideoFormat[]
  processingLogs VideoProcessingLog[]
}

enum VideoStatus {
  queued
  processing
  completed
  failed
  cancelled
}

model VideoFormat {
  id        String   @id @default(uuid())
  videoId   String
  resolution String  // "480p", "720p", "1080p"
  url       String

  video     Video    @relation(fields: [videoId], references: [id])

  @@index([videoId])
  @@index([resolution])
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  promptId  String?
  action    String         
  metadata  Json?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt    Prompt?  @relation(fields: [promptId], references: [id])
}

model UserQuota {
  id            String   @id @default(cuid())
  userId        String   @unique
  monthlyPrompts Int     @default(10) // Videos per month
  usedPrompts   Int     @default(0)   // How many used
  monthlyVideoMinutes Int @default(60) // Total video time limit
  usedVideoMinutes Int   @default(0)   // How much time used
  resetDate     DateTime // When quota resets
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VideoProcessingLog {
  id        String   @id @default(cuid())
  videoId   String
  stage     String   // "code_validation", "vm_setup", "execution", "rendering"
  message   String
  level     LogLevel @default(info) // info, warning, error
  metadata  Json?    // Additional context
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId])
  @@index([stage])
  @@index([createdAt])
}

enum LogLevel {
  info
  warning
  error
  debug
}
